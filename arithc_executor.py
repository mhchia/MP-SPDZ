import json
import os
from pathlib import Path


CIRCUIT_NAME = 'arith_circuit_interpreter'
CIRCUIT_INTERPRETER_PATH = Path(f'Programs/Source/{CIRCUIT_NAME}.mpc')
CIRCUIT_INTERPRETER_PATH.parent.mkdir(parents=True, exist_ok=True)
CMD_RUN_INTERPRETER = f'Scripts/compile-run.py -E semi {CIRCUIT_NAME}'

# Actual arithmetic circuit to be executed by the MP-SPDZ interpreter above
ARITH_CIRCUIT_NAME = 'arith_circuit_example'
ARITH_CIRCUIT_PATH = f"{ARITH_CIRCUIT_NAME}.txt"
# Config file defining a input is either a constant or should be read from which party
CONFIG_PATH = f'Configs/{ARITH_CIRCUIT_NAME}.json'


def main():
    # TODO: CONFIG_PATH should be an argument to the script
    input_from_which_party, constants = read_config(CONFIG_PATH)
    # TODO: ARITH_CIRCUIT_PATH should be an argument to the script
    # TODO: Translate arithc generated by circom-2-arithc with Nam's parser
    num_outputs = parse_arith_circuit(ARITH_CIRCUIT_PATH)
    # Generate MP-SPDZ circuit to interpret the  and write to file
    interpreter_code = generate_arith_circuit_interpreter(ARITH_CIRCUIT_PATH, input_from_which_party, constants, num_outputs)
    with open(CIRCUIT_INTERPRETER_PATH, 'w') as f:
        f.write(interpreter_code)
    # Run the MP-SPDZ interpreter to interpret the arithmetic circuit
    os.system(CMD_RUN_INTERPRETER)


def generate_arith_circuit_interpreter(
    arith_circuit_path: str,
    input_from_which_party: list[int | None],
    constants: dict[int, int],
    num_outputs: int,
):
    assert len([i for i in input_from_which_party if i is None]) == len(constants), "Number of constants should match number of None in input_from_which_party"

    inputs_str_list = [
        f'sint.get_input_from({_input_from_party})' if _input_from_party is not None else f'cint({constants[input_index]})'
        for input_index, _input_from_party in enumerate(input_from_which_party)
    ]
    inputs_str = '[' + ', '.join(inputs_str_list) + ']'
    print_outputs_str_list = [f"outputs[{i}].reveal()" for i in range(num_outputs)]
    print_outputs_str = '[' + ', '.join(print_outputs_str_list) + ']'
    return f"""from circuit_arith import Circuit
circuit = Circuit('{arith_circuit_path}')
inputs = {inputs_str}
outputs = circuit(inputs)
print_ln('outputs=%s', {print_outputs_str})
"""


def read_config(config_path: str):
    with open(config_path, 'r') as f:
        config = json.load(f)
    # input_from_which_party should be like `[0, None, 1, None]` where None means the input is a constant
    input_from_which_party: list[int | None] = config['input_from_which_party']
    constants_raw: dict[str, int] = config['constants']
    # constants should be like `{1: 10, 3: 5}` where the key is the index of the input and the value is the corresponding constant
    constants = {int(k): int(v) for k, v in constants_raw.items()}
    return input_from_which_party, constants


def parse_arith_circuit(arith_circuit_path: str):
    # Get the number of outputs from the arithmetic circuit
    # Number of outputs is the first element of the third line
    with open(arith_circuit_path, 'r') as f:
        f.readline()
        f.readline()
        num_outputs = int(f.readline().split()[0])
    return num_outputs


if __name__ == '__main__':
    main()
